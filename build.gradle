plugins {
    id 'java'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springBootDependencyManagementVersion}"
}

group = 'pl.zajavka'
version = '1.0'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}
repositories {
    mavenCentral()
}

// TODO W stosunku do materiałów na filmach, dodany został wyjątek NotFoundException
// TODO Usunięta została również paczka temp


dependencies {
    //spring
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    //db
    implementation 'org.flywaydb:flyway-core'
    runtimeOnly 'org.postgresql:postgresql'

    //annotations
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    //Mapstructa nie bylo w spring initializr dlatego jest dodany recznie
    implementation "org.mapstruct:mapstruct:$mapstructVersion"
    annotationProcessor "org.mapstruct:mapstruct-processor:$mapstructVersion"

    //tests
//    testRuntimeOnly 'com.h2database:h2' przez H2 wyskakuje nam błąd BEZSENSU tylko bo H2 odczytuje nam skrypty migracyjne
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
}

//NIE JEST POTRZEBNE BO MAMY SPRING BOOTA
//dependencies {
//    implementation "ch.qos.logback:logback-classic:$logbackVersion"
//
//    compileOnly "org.projectlombok:lombok:$lombokVersion"
//    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
//
//    implementation "org.mapstruct:mapstruct:$mapstructVersion"
//    annotationProcessor "org.mapstruct:mapstruct-processor:$mapstructVersion"
//
//    implementation "org.springframework:spring-core:$springVersion"
//    implementation "org.springframework:spring-beans:$springVersion"
//    implementation "org.springframework:spring-context:$springVersion"
//    implementation "org.springframework:spring-context-support:$springVersion"
//    implementation "org.springframework:spring-expression:$springVersion"
//    implementation "org.springframework:spring-jdbc:$springVersion"
//    implementation "org.springframework:spring-tx:$springVersion"
//
//    compileOnly "jakarta.platform:jakarta.jakartaee-api:$jakartaApiVersion"
//    implementation "org.springframework:spring-webmvc:$springVersion"
//    implementation "org.thymeleaf:thymeleaf:$thymeleafVersion"
//    implementation "org.thymeleaf:thymeleaf-spring6:$thymeleafVersion"
//
//    implementation "org.springframework.data:spring-data-jpa:$springDataVersion"
//    implementation "org.hibernate.orm:hibernate-core:$hibernateVersion"
//    implementation "org.hibernate.orm:hibernate-hikaricp:$hibernateVersion"
//    implementation "com.zaxxer:HikariCP:$hikariVersion"
//    implementation "org.postgresql:postgresql:$postgresqlVersion"
//    implementation "org.flywaydb:flyway-core:$flywayVersion"
//
//    testCompileOnly "org.projectlombok:lombok:$lombokVersion"
//    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
//}

//war {
//    archiveFileName = 'car-dealership.war'
//}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

compileJava.options.encoding = 'UTF-8'